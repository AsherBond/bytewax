name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
  pull_request: {}
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  repo-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: Install Hatch
        run: pip install hatch
      - uses: mkroening/rust-toolchain-toml@main
      - name: Install cbfmt
        run: |
            mkdir /tmp/cbfmt && cd $_
            curl -fsSL -o cbfmt.tar.gz "https://github.com/lukas-reineke/cbfmt/releases/download/v0.2.0/cbfmt_linux-x86_64_v0.2.0.tar.gz"
            tar --strip-components 1 -xvf cbfmt.tar.gz
            mv cbfmt /usr/local/bin/
      - name: Prep lint venv
        shell: bash
        env:
          PIP_COMPILE_DISABLE: 1
        run: hatch -vv env create
      - name: Run lints
        shell: bash
        env:
          PIP_COMPILE_DISABLE: 1
        run: hatch env run repo-tests
      - uses: pre-commit/action@v3.0.0

  linux:
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        target: ['x86_64', 'aarch64', 'armv7']
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Hatch
        run: pip install hatch
      - uses: mkroening/rust-toolchain-toml@main
      - uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          command: build
          args: --release -o dist -i python${{ matrix.python-version }}
          sccache: true
      - name: Prep test venv
        shell: bash
        env:
          PIP_COMPILE_DISABLE: 1
        # First `PIP_COMPILE_DISABLE` ensures that we have a fully
        # locked venv. Then we do something gross which that Hatch
        # automatically installs the local dev version of Bytewax, so
        # we manually uninstall it from the venv and re-install the
        # final wheel.
        run: |
          hatch -vv env create test.py${{ matrix.python-version }}
          hatch env run -e test.py${{ matrix.python-version }} -- pip uninstall -vy bytewax
          WHEEL_FILE=$(ls ./dist/*.whl)
          hatch env run -e test.py${{ matrix.python-version }} -- pip install -v --no-deps $WHEEL_FILE
        # Only run tests for the host architecture, as aarch64
        # and armv7 are cross-compiled.
        if: ${{ matrix.target == 'x86_64' }}
      - name: Run tests
        shell: bash
        env:
          PIP_COMPILE_DISABLE: 1
          TEST_KAFKA_BROKER : ${{ secrets.TEST_KAFKA_BROKER }}
          CLUSTER_API_KEY: ${{ secrets.CLUSTER_API_KEY }}
          CLUSTER_API_SECRET: ${{ secrets.CLUSTER_API_SECRET }}
        run: hatch env run -e test.py${{ matrix.python-version }} py-tests
        # Only run tests for the host architecture, as aarch64
        # and armv7 are cross-compiled.
        if: ${{ matrix.target == 'x86_64' }}
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  macos:
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        target: ['x86_64', 'aarch64']
    runs-on: macos-latest
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.9
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Hatch
        run: pip install hatch
      - name: Install aarch64-apple-darwin Rust target
        run: rustup target add aarch64-apple-darwin
      # Caching
      # Install gnu-tar because BSD tar is buggy
      # https://github.com/actions/cache/issues/403
      - name: Install GNU tar
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          command: build
          args: --release -o dist -i python${{ matrix.python-version }}
          sccache: true
      - name: Prep test venv
        shell: bash
        env:
          PIP_COMPILE_DISABLE: 1
        # First `PIP_COMPILE_DISABLE` ensures that we have a fully
        # locked venv. Then we do something gross which that Hatch
        # automatically installs the local dev version of Bytewax, so
        # we manually uninstall it from the venv and re-install the
        # final wheel.
        run: |
          hatch -vv env create test.py${{ matrix.python-version }}
          hatch env run -e test.py${{ matrix.python-version }} -- pip uninstall -vy bytewax
          WHEEL_FILE=$(ls ./dist/*.whl)
          hatch env run -e test.py${{ matrix.python-version }} -- pip install -v --no-deps $WHEEL_FILE
        # Only run tests for the host architecture, as aarch64
        # and armv7 are cross-compiled.
        if: ${{ matrix.target == 'x86_64' }}
      - name: Run tests
        shell: bash
        env:
          PIP_COMPILE_DISABLE: 1
          TEST_KAFKA_BROKER : ${{ secrets.TEST_KAFKA_BROKER }}
          CLUSTER_API_KEY: ${{ secrets.CLUSTER_API_KEY }}
          CLUSTER_API_SECRET: ${{ secrets.CLUSTER_API_SECRET }}
        run: hatch env run -e test.py${{ matrix.python-version }} py-tests
        # Only run tests for the host architecture, as aarch64
        # and armv7 are cross-compiled.
        if: ${{ matrix.target == 'x86_64' }}
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows:
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    runs-on: windows-latest
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - shell: cmd
        run: |
          set PATH=%PATH%;%wix%bin;"%WindowsSdkVerBinPath%"\x86
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Hatch
        run: pip install hatch
      - uses: mkroening/rust-toolchain-toml@main
      - uses: messense/maturin-action@v1
        with:
          command: build
          args: --release -o dist --interpreter python${{ matrix.python-version }}
          sccache: true
      - name: Prep test venv
        run: |
          $env:PIP_COMPILE_DISABLE=1
          hatch -vv env create test.py${{ matrix.python-version }}
          hatch env run -e test.py${{ matrix.python-version }} -- pip uninstall -vy bytewax
          $WHEEL_FILE=@((gci -path dist *.whl|Resolve-path -relative) -replace "","")[0]
          hatch env run -e test.py${{ matrix.python-version }} -- pip install -v --no-deps $WHEEL_FILE
      - name: Run tests
        run: |
          $env:PIP_COMPILE_DISABLE=1
          hatch env run -e test.py${{ matrix.python-version }} py-tests
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  upload:
    name: Store wheels in S3
    runs-on: ubuntu-20.04
    if: "github.ref == 'refs/heads/main'"
    needs: [ linux, macos, windows ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheels
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: us-west-2
      - name: Upload files to S3 with AWS CLI
        run: |
          aws s3 sync ./wheels s3://${{ secrets.WHEELS_S3_BUCKET }}/${{ github.sha }} --delete
          aws s3 ls s3://${{ secrets.WHEELS_S3_BUCKET }}/${{ github.sha }}
